import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

public class Triangle extends Figure 
{
    private static final long serialVersionUID = 1903152135658836671L;  //generated by serialver

    private double[] x;
    private double[] y;

    public static boolean are_valid(double[] x, double[] y)
    {
        double res = 0.5 * (x[0] * (y[1] - y[2]) + x[1] * (y[2] - y[0]) + x[2] * (y[0] - y[1]));
        return Math.abs(res) > 0.0001;
    }

    public Triangle(double x1, double y1, double x2, double y2, double x3, double y3, String name) throws IllegalArgumentException
    {
        double[] x = new double[] {x1, x2, x3};
        double[] y = new double[] {y1, y2, y3};

        if (!are_valid(x, y)) throw new IllegalArgumentException("These 3 points can't make a triangle: " +
                                                                "(" + x1 + ", " + y1 + "); " +
                                                                "(" + x2 + ", " + y2 + "); " +
                                                                "(" + x3 + ", " + y3 + ")");

        this.name = name;
        this.x = x;
        this.y = y;
    }

    public Triangle()
    {
        double[] x = new double[] {0, 3, 0};
        double[] y = new double[] {0, 0, 3};

        this.name = "";
        this.x = x;
        this.y = y;
    }

    //Tylko do u≈ºytku przez edytor, nie sprawdza prawidlowosci wspolrzednych punktu od razu po ich zmienieniu
    //Edytor robi to sam, po zmienieniu wszystkich punktow, przy probie zapisu
    protected void set_point(int i, double x, double y)
    {
        if (i < 0 || i > 2) throw new IllegalArgumentException("Wrong index: " + i);

        this.x[i] = x;
        this.y[i] = y;
    }

    //Wersja publiczna sprawdzajaca prawidlowosc wprowadzonego punktu
    public void set_point_public(int i, double x, double y) throws IllegalArgumentException
    {
        if (i < 0 || i > 2) throw new IllegalArgumentException("Wrong index: " + i);

        double temp_x = this.x[i];
        double temp_y = this.y[i];

        this.x[i] = x;
        this.y[i] = y;

        if (!are_valid(this.x, this.y))
        {
            this.x[i] = temp_x;
            this.y[i] = temp_y;
            throw new IllegalArgumentException("This point doesn't make a triangle with the others: (" + x + ", " + y + ")");
        }
    }

    public double get_x(int i) throws IllegalArgumentException
    {
        if (i < 0 || i > 2) throw new IllegalArgumentException("Wrong index: " + i);
        return this.x[i];
    }

    public double get_y(int i) throws IllegalArgumentException
    {
        if (i < 0 || i > 2) throw new IllegalArgumentException("Wrong index: " + i);
        return this.y[i];
    }

    public boolean read(String path)
    {
        try
        {
            FileInputStream file = new FileInputStream(path);
            ObjectInputStream in = new ObjectInputStream(file);

            Triangle aux = (Triangle)in.readObject();

            in.close();
            file.close();

            for (int i = 0; i < 3; i++) this.set_point(i, aux.x[i], aux.y[i]);
            this.set_name(aux.name);

            return true;
        }
        catch (Exception e)
        {
            return false;
        }
    }

    public boolean write(String path)
    {
        try
        {
            FileOutputStream file = new FileOutputStream(path);
            ObjectOutputStream out = new ObjectOutputStream(file);

            out.writeObject(this);

            out.close();
            file.close();

            return true;
        }
        catch (Exception e)
        {
            return false;
        }
    }

    public String toString()
    {
        return "Triangle " + name + ": " + 
        "p0 = (" + Double.toString(this.x[0]) + ", " + Double.toString(this.y[0]) + "); " + 
        "p1 = (" + Double.toString(this.x[1]) + ", " + Double.toString(this.y[1]) + "); " + 
        "p2 = (" + Double.toString(this.x[2]) + ", " + Double.toString(this.y[2]) + ")"; 
    }
}
